import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import logger from '../utils/logger.js';

// Command categories with details
const categories = {
    home: {
        emoji: 'üè†',
        title: 'Trang ch·ªß',
        description: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Miyao Music Bot!\n\n' +
                    '**Miyao** l√† bot ph√°t nh·∫°c ƒë·ªôc quy·ªÅn cho server l∆∞·ªùi v·ªõi c√°c t√≠nh nƒÉng:\n' +
                    '‚Ä¢ üéµ Ph√°t nh·∫°c t·ª´ nhi·ªÅu ngu·ªìn (YouTube, Spotify, SoundCloud...)\n' +
                    '‚Ä¢ üéöÔ∏è B·ªô l·ªçc √¢m thanh chuy√™n nghi·ªáp (8 options)\n' +
                    '‚Ä¢ üìä Gi√°m s√°t hi·ªáu su·∫•t real-time\n' +
                    '‚Ä¢ üîÑ Auto-reconnect v√† error recovery\n' +
                    '‚Ä¢ üíæ L·ªãch s·ª≠ ph√°t nh·∫°c\n\n' +
                    '**Ch·ªçn category t·ª´ menu b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt!**'
    },
    playback: {
        emoji: 'üé∂',
        title: 'L·ªánh ph√°t nh·∫°c',
        description: '**C√°c l·ªánh ƒëi·ªÅu khi·ªÉn ph√°t nh·∫°c:**\n\n' +
                    '`/play <query>` - Ph√°t nh·∫°c (URL ho·∫∑c t√¨m ki·∫øm)\n' +
                    '`/pause` - T·∫°m d·ª´ng ph√°t nh·∫°c\n' +
                    '`/resume` - Ti·∫øp t·ª•c ph√°t nh·∫°c\n' +
                    '`/skip` - B·ªè qua b√†i hi·ªán t·∫°i\n' +
                    '`/stop` - D·ª´ng v√† x√≥a h√†ng ƒë·ª£i\n' +
                    '`/nowplaying` - Th√¥ng tin b√†i ƒëang ph√°t\n\n' +
                    '**V√≠ d·ª•:**\n' +
                    '‚Ä¢ `/play blue yung kai` - T√¨m ki·∫øm v√† ph√°t\n' +
                    '‚Ä¢ `/play https://youtube.com/watch?v=...` - Ph√°t t·ª´ URL'
    },
    queue: {
        emoji: 'üìã',
        title: 'Qu·∫£n l√Ω h√†ng ƒë·ª£i',
        description: '**C√°c l·ªánh qu·∫£n l√Ω h√†ng ƒë·ª£i:**\n\n' +
                    '`/queue [page]` - Xem h√†ng ƒë·ª£i (pagination)\n' +
                    '`/shuffle` - X√°o tr·ªôn h√†ng ƒë·ª£i\n' +
                    '`/clear` - X√≥a to√†n b·ªô h√†ng ƒë·ª£i\n' +
                    '`/remove <position>` - X√≥a b√†i t·∫°i v·ªã tr√≠\n' +
                    '`/move <from> <to>` - Di chuy·ªÉn b√†i trong queue\n' +
                    '`/jump <position>` - Nh·∫£y t·ªõi b√†i v√† ph√°t ngay\n' +
                    '`/history` - Xem l·ªãch s·ª≠ ƒë√£ ph√°t\n\n' +
                    '**L∆∞u √Ω:** V·ªã tr√≠ b·∫Øt ƒë·∫ßu t·ª´ 1'
    },
    control: {
        emoji: 'üéõÔ∏è',
        title: 'ƒêi·ªÅu khi·ªÉn √¢m thanh',
        description: '**C√°c l·ªánh ƒëi·ªÅu ch·ªânh √¢m thanh:**\n\n' +
                    '`/volume <0-100>` - ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng\n' +
                    '`/loop <mode>` - Ch·∫ø ƒë·ªô l·∫∑p\n' +
                    '  ‚Ä¢ `off` - T·∫Øt l·∫∑p\n' +
                    '  ‚Ä¢ `track` - L·∫∑p b√†i hi·ªán t·∫°i\n' +
                    '  ‚Ä¢ `queue` - L·∫∑p c·∫£ queue\n' +
                    '`/seek <time>` - Tua ƒë·∫øn th·ªùi ƒëi·ªÉm (MM:SS)\n' +
                    '`/filter <option>` - √Åp d·ª•ng audio filter\n' +
                    '  ‚Ä¢ Equalizers: `bass`, `pop`, `jazz`, `rock`\n' +
                    '  ‚Ä¢ Effects: `nightcore`, `vaporwave`, `8d`\n' +
                    '  ‚Ä¢ `clear` - X√≥a t·∫•t c·∫£ filters'
    },
    info: {
        emoji: 'üìä',
        title: 'Th√¥ng tin & Gi√°m s√°t',
        description: '**C√°c l·ªánh th√¥ng tin:**\n\n' +
                    '`/help` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y\n' +
                    '`/ping` - Ki·ªÉm tra ƒë·ªô tr·ªÖ bot\n' +
                    '`/stats` - Th·ªëng k√™ hi·ªáu su·∫•t bot\n' +
                    '  ‚Ä¢ Cache hit rate, memory usage\n' +
                    '  ‚Ä¢ Active queues, node health\n' +
                    '`/nodes` - Tr·∫°ng th√°i Lavalink nodes\n' +
                    '  ‚Ä¢ CPU/Memory per node\n' +
                    '  ‚Ä¢ Health score (0-100)\n' +
                    '  ‚Ä¢ Best node recommendation'
    },
    tips: {
        emoji: 'üí°',
        title: 'Tips & Tricks',
        description: '**M·∫πo s·ª≠ d·ª•ng hi·ªáu qu·∫£:**\n\n' +
                    'üîä **Voice Channel:**\n' +
                    '‚Ä¢ B·∫°n ph·∫£i ·ªü trong voice channel ƒë·ªÉ s·ª≠ d·ª•ng\n' +
                    '‚Ä¢ Bot t·ª± ƒë·ªông r·ªùi khi k√™nh tr·ªëng (5 ph√∫t)\n\n' +
                    'üéµ **Ngu·ªìn nh·∫°c:**\n' +
                    '‚Ä¢ YouTube, Spotify, SoundCloud\n' +
                    '‚Ä¢ H·ªó tr·ª£ playlist (auto-queue)\n' +
                    '‚Ä¢ T√¨m ki·∫øm th√¥ng minh v·ªõi 5 k·∫øt qu·∫£\n\n' +
                    'üéöÔ∏è **Audio Quality:**\n' +
                    '‚Ä¢ S·ª≠ d·ª•ng filters ƒë·ªÉ t√πy ch·ªânh √¢m thanh\n' +
                    '‚Ä¢ Nightcore/Vaporwave cho hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát\n' +
                    '‚Ä¢ 8D audio cho tr·∫£i nghi·ªám kh√¥ng gian\n\n' +
                    '‚ö° **Performance:**\n' +
                    '‚Ä¢ Bot c√≥ caching th√¥ng minh (94% faster)\n' +
                    '‚Ä¢ Auto-recovery khi b·ªã disconnect\n' +
                    '‚Ä¢ Health monitoring cho stability'
    }
};

export default {
    data: new SlashCommandBuilder()
        .setName('help')
        .setDescription('Hi·ªÉn th·ªã danh s√°ch l·ªánh v√† h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng'),
    
    async execute(interaction, client) {
        try {
            // Create dropdown menu
            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('help_category')
                .setPlaceholder('üìö Ch·ªçn category ƒë·ªÉ xem chi ti·∫øt')
                .addOptions([
                    {
                        label: 'Trang ch·ªß',
                        description: 'Gi·ªõi thi·ªáu v·ªÅ Miyao Music Bot',
                        value: 'home',
                        emoji: 'üè†'
                    },
                    {
                        label: 'Ph√°t nh·∫°c',
                        description: 'L·ªánh ƒëi·ªÅu khi·ªÉn ph√°t nh·∫°c c∆° b·∫£n',
                        value: 'playback',
                        emoji: 'üé∂'
                    },
                    {
                        label: 'Qu·∫£n l√Ω Queue',
                        description: 'L·ªánh qu·∫£n l√Ω h√†ng ƒë·ª£i nh·∫°c',
                        value: 'queue',
                        emoji: 'üìã'
                    },
                    {
                        label: 'ƒêi·ªÅu khi·ªÉn √¢m thanh',
                        description: 'Volume, loop, seek, filters',
                        value: 'control',
                        emoji: 'üéõÔ∏è'
                    },
                    {
                        label: 'Th√¥ng tin & Gi√°m s√°t',
                        description: 'Stats, nodes, ping',
                        value: 'info',
                        emoji: 'üìä'
                    },
                    {
                        label: 'Tips & Tricks',
                        description: 'M·∫πo s·ª≠ d·ª•ng hi·ªáu qu·∫£',
                        value: 'tips',
                        emoji: 'üí°'
                    }
                ]);
            
            // Create action buttons
            const buttons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('help_feedback')
                        .setLabel('G·ª≠i g√≥p √Ω')
                        .setEmoji('‚úâÔ∏è')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('help_report')
                        .setLabel('B√°o c√°o l·ªói')
                        .setEmoji('üêõ')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setLabel('GitHub')
                        .setEmoji('üíª')
                        .setStyle(ButtonStyle.Link)
                        .setURL('https://github.com/khuongit24/Miyao-Bot')
                );
            
            // Create initial embed (home)
            const embed = new EmbedBuilder()
                .setColor(client.config.bot.color)
                .setTitle(`${categories.home.emoji} ${categories.home.title}`)
                .setDescription(categories.home.description)
                .setThumbnail(client.user.displayAvatarURL())
                .setFooter({ text: `${client.config.bot.footer}` })
                .setTimestamp();
            
            await interaction.reply({
                embeds: [embed],
                components: [
                    new ActionRowBuilder().addComponents(selectMenu),
                    buttons
                ]
            });
            
            logger.command('help', interaction.user.id, interaction.guildId);
            
        } catch (error) {
            logger.error('Help command error', error);
            await interaction.reply({
                content: '‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã h∆∞·ªõng d·∫´n!',
                ephemeral: true
            });
        }
    },
    
    // Category data for handler
    categories
};
