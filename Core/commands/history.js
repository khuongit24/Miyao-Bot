import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import logger from '../utils/logger.js';

export default {
    data: new SlashCommandBuilder()
        .setName('history')
        .setDescription('Hi·ªÉn th·ªã l·ªãch s·ª≠ c√°c b√†i h√°t ƒë√£ ph√°t g·∫ßn ƒë√¢y'),
    
    async execute(interaction, client) {
        try {
            const queue = client.musicManager.queues.get(interaction.guildId);
            
            if (!queue) {
                return await interaction.reply({
                    content: '‚ùå Kh√¥ng c√≥ l·ªãch s·ª≠ ph√°t nh·∫°c cho server n√†y!',
                    ephemeral: true
                });
            }
            
            const history = queue.history || [];
            
            if (history.length === 0) {
                return await interaction.reply({
                    content: 'üìú Ch∆∞a c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c ph√°t trong session n√†y!',
                    ephemeral: true
                });
            }
            
            // Show last 10 tracks
            const recentTracks = history.slice(-10).reverse();
            
            let description = recentTracks.map((track, index) => {
                // Defensive programming - check if track.info exists
                if (!track || !track.info) {
                    return `**${index + 1}.** Unknown track`;
                }
                
                const duration = track.info.length && !track.info.isStream ? 
                    `${Math.floor(track.info.length/1000/60)}:${String(Math.floor((track.info.length/1000)%60)).padStart(2, '0')}` : 
                    'Live';
                
                const title = track.info.title || 'Unknown';
                const uri = track.info.uri || '#';
                const requester = track.requester || 'Unknown';
                
                return `**${index + 1}.** [${title}](${uri})\n` +
                       `‚îî Ng∆∞·ªùi y√™u c·∫ßu: <@${requester}> ‚Ä¢ Th·ªùi l∆∞·ª£ng: \`${duration}\``;
            }).join('\n\n');
            
            const stats = queue.getStats ? queue.getStats() : null;
            
            const embed = new EmbedBuilder()
                .setColor(client.config.bot.color)
                .setTitle('üìú L·ªãch S·ª≠ Ph√°t Nh·∫°c')
                .setDescription(description)
                .setFooter({ text: `${client.config.bot.footer} ‚Ä¢ Hi·ªÉn th·ªã ${recentTracks.length} b√†i g·∫ßn nh·∫•t` })
                .setTimestamp();
            
            if (stats) {
                embed.addFields([{
                    name: 'üìä Th·ªëng K√™ Session',
                    value: `**T·ªïng s·ªë b√†i ƒë√£ ph√°t**: ${stats.totalPlayed}\n` +
                           `**Th·ªùi gian ph√°t**: ${Math.floor(stats.totalPlaytime / 60000)} ph√∫t\n` +
                           `**S·ªë l·∫ßn skip**: ${stats.skips}`,
                    inline: false
                }]);
            }
            
            await interaction.reply({
                embeds: [embed]
            });
            
            logger.command('history', interaction.user.id, interaction.guildId);
            
        } catch (error) {
            logger.error('History command error', error);
            await interaction.reply({
                content: '‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã l·ªãch s·ª≠!',
                ephemeral: true
            });
        }
    }
};
