/**
 * Error Embeds
 * User-friendly error messages with actionable suggestions
 */

import { EmbedBuilder } from 'discord.js';
import { 
    getErrorColor, 
    getErrorEmoji, 
    formatErrorForUser,
    MiyaoError 
} from '../../Core/utils/errors.js';

/**
 * Create error embed with suggestions
 * @param {Error} error - Error object
 * @param {Object} config - Bot configuration
 * @returns {EmbedBuilder} Error embed
 */
export function createErrorEmbed(error, config = null) {
    const formatted = formatErrorForUser(error);
    
    const embed = new EmbedBuilder()
        .setColor(formatted.color)
        .setTitle(formatted.title)
        .setDescription(formatted.description)
        .setTimestamp();

    // Add suggestions field if available
    if (formatted.suggestions && formatted.suggestions.length > 0) {
        const suggestionsText = formatted.suggestions
            .map((suggestion, index) => `${index + 1}. ${suggestion}`)
            .join('\n');
        
        embed.addFields([{
            name: 'üí° G·ª£i √Ω kh·∫Øc ph·ª•c',
            value: suggestionsText,
            inline: false
        }]);
    }

    // Add error code in footer
    if (config?.bot?.footer) {
        embed.setFooter({ 
            text: `${config.bot.footer} | Error: ${formatted.severity.toUpperCase()}` 
        });
    } else {
        embed.setFooter({ 
            text: `Error Code: ${error.code || 'UNKNOWN'} | ${formatted.severity.toUpperCase()}` 
        });
    }

    return embed;
}

/**
 * Create network error embed
 */
export function createNetworkErrorEmbed(message, config) {
    return new EmbedBuilder()
        .setColor('#e74c3c')
        .setTitle('üåê L·ªói K·∫øt N·ªëi')
        .setDescription(message)
        .addFields([
            {
                name: 'üí° G·ª£i √Ω',
                value: '‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi internet\n‚Ä¢ Th·ª≠ l·∫°i sau v√†i gi√¢y\n‚Ä¢ Li√™n h·ªá admin n·∫øu l·ªói ti·∫øp di·ªÖn',
                inline: false
            }
        ])
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();
}

/**
 * Create permission error embed
 */
export function createPermissionErrorEmbed(message, requiredPermissions = [], config) {
    const embed = new EmbedBuilder()
        .setColor('#f39c12')
        .setTitle('‚ö†Ô∏è Thi·∫øu Quy·ªÅn')
        .setDescription(message)
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();

    if (requiredPermissions.length > 0) {
        embed.addFields([
            {
                name: 'üîë Quy·ªÅn y√™u c·∫ßu',
                value: requiredPermissions.map(p => `‚Ä¢ ${p}`).join('\n'),
                inline: false
            },
            {
                name: 'üí° G·ª£i √Ω',
                value: '‚Ä¢ Ki·ªÉm tra quy·ªÅn c·ªßa b·∫°n\n‚Ä¢ Y√™u c·∫ßu admin c·∫•p quy·ªÅn\n‚Ä¢ Xem /help ƒë·ªÉ bi·∫øt quy·ªÅn c·∫ßn thi·∫øt',
                inline: false
            }
        ]);
    }

    return embed;
}

/**
 * Create validation error embed
 */
export function createValidationErrorEmbed(message, examples = [], config) {
    const embed = new EmbedBuilder()
        .setColor('#f39c12')
        .setTitle('‚ö†Ô∏è D·ªØ Li·ªáu Kh√¥ng H·ª£p L·ªá')
        .setDescription(message)
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();

    if (examples.length > 0) {
        embed.addFields([{
            name: 'üìù V√≠ d·ª• ƒë√∫ng',
            value: examples.map(ex => `‚Ä¢ ${ex}`).join('\n'),
            inline: false
        }]);
    }

    embed.addFields([{
        name: 'üí° G·ª£i √Ω',
        value: '‚Ä¢ Ki·ªÉm tra l·∫°i input\n‚Ä¢ Xem /help <command> ƒë·ªÉ bi·∫øt c√∫ ph√°p\n‚Ä¢ Th·ª≠ v·ªõi gi√° tr·ªã kh√°c',
        inline: false
    }]);

    return embed;
}

/**
 * Create "not found" error embed
 */
export function createNotFoundEmbed(resourceType, identifier, suggestions = [], config) {
    return new EmbedBuilder()
        .setColor('#3498db')
        .setTitle('‚ÑπÔ∏è Kh√¥ng T√¨m Th·∫•y')
        .setDescription(`Kh√¥ng t√¨m th·∫•y ${resourceType}: **${identifier}**`)
        .addFields([{
            name: 'üí° G·ª£i √Ω',
            value: suggestions.length > 0 
                ? suggestions.map(s => `‚Ä¢ ${s}`).join('\n')
                : '‚Ä¢ Ki·ªÉm tra l·∫°i t√™n/ID\n‚Ä¢ Xem danh s√°ch c√≥ s·∫µn\n‚Ä¢ Th·ª≠ v·ªõi t·ª´ kh√≥a kh√°c',
            inline: false
        }])
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();
}

/**
 * Create search error embed with suggestions
 */
export function createSearchErrorEmbed(query, config) {
    return new EmbedBuilder()
        .setColor('#3498db')
        .setTitle('üîç Kh√¥ng T√¨m Th·∫•y K·∫øt Qu·∫£')
        .setDescription(`Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho: **${query}**`)
        .addFields([
            {
                name: 'üí° Th·ª≠ nh·ªØng c√°ch sau',
                value: 
                    '1. Ki·ªÉm tra ch√≠nh t·∫£\n' +
                    '2. Th·ª≠ v·ªõi t·ª´ kh√≥a kh√°c\n' +
                    '3. S·ª≠ d·ª•ng t√™n ƒë·∫ßy ƒë·ªß c·ªßa b√†i h√°t\n' +
                    '4. Th√™m t√™n ngh·ªá sƒ© v√†o t√¨m ki·∫øm\n' +
                    '5. S·ª≠ d·ª•ng URL tr·ª±c ti·∫øp t·ª´ YouTube/Spotify',
                inline: false
            },
            {
                name: 'üìå V√≠ d·ª• t√¨m ki·∫øm t·ªët',
                value:
                    '‚Ä¢ `APT Rose Bruno Mars`\n' +
                    '‚Ä¢ `C√≥ ch·∫Øc y√™u l√† ƒë√¢y S∆°n T√πng`\n' +
                    '‚Ä¢ `https://youtu.be/...`',
                inline: false
            }
        ])
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();
}

/**
 * Create queue error embed
 */
export function createQueueErrorEmbed(message, action = null, config) {
    const embed = new EmbedBuilder()
        .setColor('#3498db')
        .setTitle('‚ÑπÔ∏è H√†ng ƒê·ª£i')
        .setDescription(message)
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();

    if (action) {
        embed.addFields([{
            name: 'üí° H√†nh ƒë·ªông ti·∫øp theo',
            value: action,
            inline: false
        }]);
    }

    return embed;
}

/**
 * Create player error embed
 */
export function createPlayerErrorEmbed(message, config) {
    return new EmbedBuilder()
        .setColor('#e74c3c')
        .setTitle('‚ùå L·ªói Ph√°t Nh·∫°c')
        .setDescription(message)
        .addFields([{
            name: 'üí° Th·ª≠ nh·ªØng c√°ch sau',
            value:
                '1. D·ª´ng v√† ph√°t l·∫°i: `/stop` r·ªìi `/play`\n' +
                '2. Ki·ªÉm tra xem bot c√≤n trong voice channel kh√¥ng\n' +
                '3. Th·ª≠ v·ªõi b√†i h√°t kh√°c\n' +
                '4. N·∫øu l·ªói ti·∫øp di·ªÖn, c√≥ th·ªÉ l√† l·ªói Lavalink',
            inline: false
        }])
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();
}

/**
 * Create critical error embed
 */
export function createCriticalErrorEmbed(message, errorCode, config) {
    return new EmbedBuilder()
        .setColor('#c0392b')
        .setTitle('üö® L·ªói Nghi√™m Tr·ªçng')
        .setDescription(message)
        .addFields([
            {
                name: '‚ö†Ô∏è Y√™u c·∫ßu h√†nh ƒë·ªông',
                value: 'Vui l√≤ng li√™n h·ªá admin v√† cung c·∫•p th√¥ng tin sau:',
                inline: false
            },
            {
                name: 'üîñ M√£ l·ªói',
                value: `\`${errorCode}\``,
                inline: true
            },
            {
                name: 'üïê Th·ªùi gian',
                value: new Date().toLocaleString('vi-VN'),
                inline: true
            }
        ])
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();
}

/**
 * Create rate limit embed
 */
export function createRateLimitEmbed(retryAfter, config) {
    const minutes = Math.floor(retryAfter / 60);
    const seconds = retryAfter % 60;
    const timeString = minutes > 0 
        ? `${minutes} ph√∫t ${seconds} gi√¢y`
        : `${seconds} gi√¢y`;

    return new EmbedBuilder()
        .setColor('#f39c12')
        .setTitle('‚è±Ô∏è Gi·ªõi H·∫°n T·ªëc ƒê·ªô')
        .setDescription(`B·∫°n ƒëang s·ª≠ d·ª•ng l·ªánh qu√° nhanh!`)
        .addFields([
            {
                name: '‚è≥ Th·ª≠ l·∫°i sau',
                value: timeString,
                inline: true
            },
            {
                name: 'üí° L∆∞u √Ω',
                value: 'Tr√°nh spam l·ªánh ƒë·ªÉ gi·ªØ bot ho·∫°t ƒë·ªông t·ªët cho m·ªçi ng∆∞·ªùi',
                inline: false
            }
        ])
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();
}

/**
 * Create maintenance embed
 */
export function createMaintenanceEmbed(estimatedTime, config) {
    return new EmbedBuilder()
        .setColor('#f39c12')
        .setTitle('üîß B·∫£o Tr√¨')
        .setDescription('Bot ƒëang trong qu√° tr√¨nh b·∫£o tr√¨')
        .addFields([
            {
                name: '‚è±Ô∏è Th·ªùi gian d·ª± ki·∫øn',
                value: estimatedTime || 'Ch∆∞a x√°c ƒë·ªãnh',
                inline: true
            },
            {
                name: 'üí° Th√¥ng tin',
                value: 'Vui l√≤ng th·ª≠ l·∫°i sau. Xin l·ªói v√¨ s·ª± b·∫•t ti·ªán!',
                inline: false
            }
        ])
        .setFooter({ text: config?.bot?.footer || 'Miyao Music Bot' })
        .setTimestamp();
}

/**
 * Quick error response helper
 * @param {Interaction} interaction - Discord interaction
 * @param {Error} error - Error object
 * @param {Object} config - Bot configuration
 * @param {boolean} ephemeral - Whether to send as ephemeral
 */
export async function sendErrorResponse(interaction, error, config, ephemeral = false) {
    const embed = createErrorEmbed(error, config);
    
    try {
        if (interaction.replied || interaction.deferred) {
            return await interaction.editReply({ 
                embeds: [embed],
                components: [] // Clear any components
            });
        } else {
            return await interaction.reply({ 
                embeds: [embed], 
                ephemeral,
                components: []
            });
        }
    } catch (replyError) {
        // If we can't reply, try to log it
        console.error('Failed to send error response:', replyError);
        return null;
    }
}

export default {
    createErrorEmbed,
    createNetworkErrorEmbed,
    createPermissionErrorEmbed,
    createValidationErrorEmbed,
    createNotFoundEmbed,
    createSearchErrorEmbed,
    createQueueErrorEmbed,
    createPlayerErrorEmbed,
    createCriticalErrorEmbed,
    createRateLimitEmbed,
    createMaintenanceEmbed,
    sendErrorResponse
};
